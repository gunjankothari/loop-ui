/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IProgressbar, } from "./components/progressbar-ui/progressbar-ui";
export namespace Components {
    interface CardUi {
    }
    interface MyComponent {
        /**
          * The middle name
         */
        "description": string;
        /**
          * The first name
         */
        "header": string;
        /**
          * The last name
         */
        "last": string;
    }
    interface OptionUi {
        "disabled": boolean;
        "selected": boolean;
        "value": any;
    }
    interface ProgressbarUi {
        "stack": boolean;
        "value": string | number | IProgressbar;
        "values": (string | number | IProgressbar)[];
    }
    interface SelectUi {
        "getValue": () => Promise<any[]>;
        "multiselect": boolean;
        "placeholder": string;
    }
    interface ToggleButton {
    }
}
declare global {
    interface HTMLCardUiElement extends Components.CardUi, HTMLStencilElement {
    }
    var HTMLCardUiElement: {
        prototype: HTMLCardUiElement;
        new (): HTMLCardUiElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLOptionUiElement extends Components.OptionUi, HTMLStencilElement {
    }
    var HTMLOptionUiElement: {
        prototype: HTMLOptionUiElement;
        new (): HTMLOptionUiElement;
    };
    interface HTMLProgressbarUiElement extends Components.ProgressbarUi, HTMLStencilElement {
    }
    var HTMLProgressbarUiElement: {
        prototype: HTMLProgressbarUiElement;
        new (): HTMLProgressbarUiElement;
    };
    interface HTMLSelectUiElement extends Components.SelectUi, HTMLStencilElement {
    }
    var HTMLSelectUiElement: {
        prototype: HTMLSelectUiElement;
        new (): HTMLSelectUiElement;
    };
    interface HTMLToggleButtonElement extends Components.ToggleButton, HTMLStencilElement {
    }
    var HTMLToggleButtonElement: {
        prototype: HTMLToggleButtonElement;
        new (): HTMLToggleButtonElement;
    };
    interface HTMLElementTagNameMap {
        "card-ui": HTMLCardUiElement;
        "my-component": HTMLMyComponentElement;
        "option-ui": HTMLOptionUiElement;
        "progressbar-ui": HTMLProgressbarUiElement;
        "select-ui": HTMLSelectUiElement;
        "toggle-button": HTMLToggleButtonElement;
    }
}
declare namespace LocalJSX {
    interface CardUi {
    }
    interface MyComponent {
        /**
          * The middle name
         */
        "description"?: string;
        /**
          * The first name
         */
        "header"?: string;
        /**
          * The last name
         */
        "last"?: string;
    }
    interface OptionUi {
        "disabled"?: boolean;
        "onOptionSelected"?: (event: CustomEvent<any>) => void;
        "selected"?: boolean;
        "value"?: any;
    }
    interface ProgressbarUi {
        "stack"?: boolean;
        "value"?: string | number | IProgressbar;
        "values"?: (string | number | IProgressbar)[];
    }
    interface SelectUi {
        "multiselect"?: boolean;
        "placeholder"?: string;
    }
    interface ToggleButton {
    }
    interface IntrinsicElements {
        "card-ui": CardUi;
        "my-component": MyComponent;
        "option-ui": OptionUi;
        "progressbar-ui": ProgressbarUi;
        "select-ui": SelectUi;
        "toggle-button": ToggleButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "card-ui": LocalJSX.CardUi & JSXBase.HTMLAttributes<HTMLCardUiElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "option-ui": LocalJSX.OptionUi & JSXBase.HTMLAttributes<HTMLOptionUiElement>;
            "progressbar-ui": LocalJSX.ProgressbarUi & JSXBase.HTMLAttributes<HTMLProgressbarUiElement>;
            "select-ui": LocalJSX.SelectUi & JSXBase.HTMLAttributes<HTMLSelectUiElement>;
            "toggle-button": LocalJSX.ToggleButton & JSXBase.HTMLAttributes<HTMLToggleButtonElement>;
        }
    }
}
